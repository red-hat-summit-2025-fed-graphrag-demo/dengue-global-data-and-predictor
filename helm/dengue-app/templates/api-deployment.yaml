{{- if .Values.api.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-api-config
  labels:
    {{- include "dengue-app.labels" . | nindent 4 }}
    app: {{ .Release.Name }}-api
data:
{{- range $key, $value := .Values.api.configMapData }}
  {{ $key }}: {{ tpl $value $ | quote }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-api-secret
  labels:
    {{- include "dengue-app.labels" . | nindent 4 }}
    app: {{ .Release.Name }}-api
type: Opaque
data:
{{- range $key, $value := .Values.api.secretData }}
  {{ $key }}: {{ $value | b64enc | quote }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-api-files
  labels:
    {{- include "dengue-app.labels" . | nindent 4 }}
    app: {{ .Release.Name }}-api
data:
  main.py: |
    from fastapi import FastAPI, Depends, HTTPException, Query
    from fastapi.middleware.cors import CORSMiddleware
    from sqlalchemy.orm import Session
    from sqlalchemy import func, select, and_, desc
    from typing import List, Optional
    from datetime import date

    # Import from local files
    from database import get_db, national_data, spatial_data, temporal_data
    from schemas import ApiResponse, DengueStats, CountryTotal, YearlyTotal, RegionalTotal

    app = FastAPI(
        title="Dengue Data API",
        description="API for accessing dengue fever data from around the world",
        version="1.0.0"
    )

    # Enable CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    @app.get("/", response_model=ApiResponse)
    def root():
        """Root endpoint with API information"""
        return ApiResponse(
            status="success",
            data={
                "api_name": "Dengue Data API",
                "version": "1.0.0",
                "endpoints": [
                    "/national/stats",
                    "/national/countries",
                    "/national/yearly",
                    "/spatial/regions",
                    "/temporal/data",
                    "/health"
                ]
            },
            message="Welcome to the Dengue Data API"
        )

    @app.get("/health")
    def health_check(db: Session = Depends(get_db)):
        """Health check endpoint that tests database connection"""
        try:
            # Simple database connection test
            result = db.execute(select(func.count()).select_from(national_data)).scalar()
            return {"status": "healthy", "database_connection": "ok", "records_count": result}
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")

    @app.get("/national/stats", response_model=ApiResponse)
    def get_national_stats(db: Session = Depends(get_db)):
        """Get overall statistics about the dengue data"""
        try:
            # Get record count
            record_count = db.execute(select(func.count()).select_from(national_data)).scalar()
            
            # Get total cases
            total_cases = db.execute(
                select(func.sum(national_data.c.dengue_total)).select_from(national_data)
            ).scalar() or 0
            
            # Get unique countries count
            countries_count = db.execute(
                select(func.count(national_data.c.adm_0_name.distinct())).select_from(national_data)
            ).scalar()
            
            # Get year range
            min_year = db.execute(
                select(func.min(national_data.c.year)).select_from(national_data)
            ).scalar()
            
            max_year = db.execute(
                select(func.max(national_data.c.year)).select_from(national_data)
            ).scalar()
            
            year_range = list(range(min_year, max_year + 1)) if min_year and max_year else []
            
            stats = DengueStats(
                total_records=record_count,
                total_cases=total_cases,
                countries_count=countries_count,
                year_range=year_range
            )
            
            return ApiResponse(status="success", data=stats)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    @app.get("/national/countries", response_model=ApiResponse)
    def get_top_countries(
        limit: int = Query(10, description="Number of top countries to return"),
        db: Session = Depends(get_db)
    ):
        """Get top countries by total dengue cases"""
        try:
            query = select(
                national_data.c.adm_0_name.label("country"),
                func.sum(national_data.c.dengue_total).label("total_cases")
            ).select_from(
                national_data
            ).group_by(
                national_data.c.adm_0_name
            ).order_by(
                desc("total_cases")
            ).limit(limit)
            
            results = [
                CountryTotal(country=row.country, total_cases=row.total_cases)
                for row in db.execute(query).all()
            ]
            
            return ApiResponse(status="success", data=results)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    @app.get("/national/yearly", response_model=ApiResponse)
    def get_yearly_data(
        country: Optional[str] = None,
        db: Session = Depends(get_db)
    ):
        """Get yearly dengue case totals, optionally filtered by country"""
        try:
            query = select(
                national_data.c.year.label("year"),
                func.sum(national_data.c.dengue_total).label("total_cases")
            ).select_from(
                national_data
            )
            
            if country:
                query = query.where(
                    func.lower(national_data.c.adm_0_name) == func.lower(country)
                )
            
            query = query.group_by(
                national_data.c.year
            ).order_by(
                national_data.c.year
            )
            
            results = [
                YearlyTotal(year=row.year, total_cases=row.total_cases)
                for row in db.execute(query).all()
            ]
            
            return ApiResponse(status="success", data=results)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    @app.get("/spatial/regions", response_model=ApiResponse)
    def get_regional_data(
        country: Optional[str] = None,
        year: Optional[int] = None,
        limit: int = Query(20, description="Number of regions to return"),
        db: Session = Depends(get_db)
    ):
        """Get regional dengue case totals, optionally filtered by country and year"""
        try:
            query = select(
                spatial_data.c.adm_0_name.label("country"),
                spatial_data.c.adm_1_name.label("region"),
                func.sum(spatial_data.c.dengue_total).label("total_cases")
            ).select_from(
                spatial_data
            ).where(
                spatial_data.c.adm_1_name != None  # Filter out None values
            )
            
            # Apply optional filters
            if country:
                query = query.where(
                    func.lower(spatial_data.c.adm_0_name) == func.lower(country)
                )
            
            if year:
                query = query.where(
                    spatial_data.c.year == year
                )
            
            query = query.group_by(
                spatial_data.c.adm_0_name,
                spatial_data.c.adm_1_name
            ).order_by(
                desc("total_cases")
            ).limit(limit)
            
            results = [
                RegionalTotal(
                    country=row.country, 
                    region=row.region if row.region else "Unknown", 
                    total_cases=row.total_cases
                )
                for row in db.execute(query).all()
            ]
            
            return ApiResponse(status="success", data=results)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    @app.get("/temporal/data", response_model=ApiResponse)
    def get_temporal_data(
        country: str = Query(..., description="Country to get temporal data for"),
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        limit: int = Query(100, description="Number of records to return"),
        db: Session = Depends(get_db)
    ):
        """Get temporal dengue case data for a specific country"""
        try:
            query = select(
                temporal_data.c.adm_0_name,
                temporal_data.c.calendar_start_date,
                temporal_data.c.calendar_end_date,
                temporal_data.c.year,
                temporal_data.c.dengue_total,
                temporal_data.c.t_res
            ).select_from(
                temporal_data
            ).where(
                func.lower(temporal_data.c.adm_0_name) == func.lower(country)
            )
            
            # Apply date filters if provided
            if start_date:
                query = query.where(
                    temporal_data.c.calendar_start_date >= start_date
                )
            
            if end_date:
                query = query.where(
                    temporal_data.c.calendar_end_date <= end_date
                )
            
            query = query.order_by(
                temporal_data.c.calendar_start_date
            ).limit(limit)
            
            results = [
                {
                    "country": row.adm_0_name,
                    "start_date": row.calendar_start_date.isoformat() if row.calendar_start_date else None,
                    "end_date": row.calendar_end_date.isoformat() if row.calendar_end_date else None,
                    "year": row.year,
                    "dengue_cases": row.dengue_total,
                    "time_resolution": row.t_res
                }
                for row in db.execute(query).all()
            ]
            
            return ApiResponse(status="success", data=results)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    if __name__ == "__main__":
        import uvicorn
        uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
  
  database.py: |
    from sqlalchemy import create_engine, Column, Integer, String, Float, Date, MetaData, Table
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker
    import os
    from dotenv import load_dotenv

    load_dotenv()

    # Database connection settings
    DB_HOST = os.getenv("DB_HOST", "postgresql")
    DB_PORT = os.getenv("DB_PORT", "5432")
    DB_NAME = os.getenv("DB_NAME", "sampledb")
    DB_USER = os.getenv("DB_USER", "user5T0")
    DB_PASSWORD = os.getenv("DB_PASSWORD", "I1A37SHxlTjB6ulf")

    # Create SQLAlchemy engine
    DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    engine = create_engine(DATABASE_URL)

    # Create session factory bound to engine
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

    # Create Base class for declarative models
    Base = declarative_base()

    # Database dependency
    def get_db():
        db = SessionLocal()
        try:
            yield db
        finally:
            db.close()

    # Define tables that match existing PostgreSQL tables
    metadata = MetaData()

    # National data table
    national_data = Table(
        'national_data', 
        metadata,
        Column('id', Integer, primary_key=True),
        Column('adm_0_name', String(255)),
        Column('adm_1_name', String(255)),
        Column('adm_2_name', String(255)),
        Column('full_name', String(255)),
        Column('iso_a0', String(10)),
        Column('fao_gaul_code', Integer),
        Column('rne_iso_code', String(10)),
        Column('ibge_code', String(255)),
        Column('calendar_start_date', Date),
        Column('calendar_end_date', Date),
        Column('year', Integer),
        Column('dengue_total', Float),
        Column('case_definition_standardised', String(50)),
        Column('s_res', String(50)),
        Column('t_res', String(50)),
        Column('uuid', String(100))
    )

    # Spatial data table
    spatial_data = Table(
        'spatial_data', 
        metadata,
        Column('id', Integer, primary_key=True),
        Column('adm_0_name', String(255)),
        Column('adm_1_name', String(255)),
        Column('adm_2_name', String(255)),
        Column('full_name', String(255)),
        Column('iso_a0', String(10)),
        Column('fao_gaul_code', Integer),
        Column('rne_iso_code', String(10)),
        Column('ibge_code', String(255)),
        Column('calendar_start_date', Date),
        Column('calendar_end_date', Date),
        Column('year', Integer),
        Column('dengue_total', Float),
        Column('case_definition_standardised', String(50)),
        Column('s_res', String(50)),
        Column('t_res', String(50)),
        Column('uuid', String(100))
    )

    # Temporal data table
    temporal_data = Table(
        'temporal_data', 
        metadata,
        Column('id', Integer, primary_key=True),
        Column('adm_0_name', String(255)),
        Column('adm_1_name', String(255)),
        Column('adm_2_name', String(255)),
        Column('full_name', String(255)),
        Column('iso_a0', String(10)),
        Column('fao_gaul_code', Integer),
        Column('rne_iso_code', String(10)),
        Column('ibge_code', String(255)),
        Column('calendar_start_date', Date),
        Column('calendar_end_date', Date),
        Column('year', Integer),
        Column('dengue_total', Float),
        Column('case_definition_standardised', String(50)),
        Column('s_res', String(50)),
        Column('t_res', String(50)),
        Column('uuid', String(100))
    )
  
  schemas.py: |
    from pydantic import BaseModel
    from typing import Optional, List, Dict, Any
    from datetime import date

    class DengueDataBase(BaseModel):
        adm_0_name: Optional[str] = None
        adm_1_name: Optional[str] = None
        adm_2_name: Optional[str] = None
        full_name: Optional[str] = None
        iso_a0: Optional[str] = None
        fao_gaul_code: Optional[int] = None
        rne_iso_code: Optional[str] = None
        ibge_code: Optional[str] = None
        calendar_start_date: Optional[date] = None
        calendar_end_date: Optional[date] = None
        year: Optional[int] = None
        dengue_total: Optional[float] = None
        case_definition_standardised: Optional[str] = None
        s_res: Optional[str] = None
        t_res: Optional[str] = None
        uuid: Optional[str] = None

    class DengueData(DengueDataBase):
        id: int

        class Config:
            orm_mode = True

    class CountryTotal(BaseModel):
        country: str
        total_cases: float

    class YearlyTotal(BaseModel):
        year: int
        total_cases: float

    class RegionalTotal(BaseModel):
        country: str
        region: str
        total_cases: float

    class DengueStats(BaseModel):
        total_records: int
        total_cases: float
        countries_count: int
        year_range: List[int]

    class FilterParams(BaseModel):
        country: Optional[str] = None
        region: Optional[str] = None
        year: Optional[int] = None
        start_date: Optional[date] = None
        end_date: Optional[date] = None

    class ApiResponse(BaseModel):
        status: str
        data: Any
        message: Optional[str] = None
  
  requirements.txt: |
    fastapi==0.104.1
    uvicorn==0.24.0
    sqlalchemy==2.0.23
    psycopg2-binary==2.9.9
    pydantic==2.4.2
    python-dotenv==1.0.0
  
  start.sh: |
    #!/bin/bash
    set -e

    echo "Installing dependencies..."
    pip install --no-cache-dir --user -r /app/requirements.txt
    export PATH=$PATH:$HOME/.local/bin

    echo "Starting API server..."
    cd /app
    uvicorn main:app --host 0.0.0.0 --port 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  labels:
    {{- include "dengue-app.labels" . | nindent 4 }}
    app: {{ .Release.Name }}-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
        {{- include "dengue-app.labels" . | nindent 8 }}
    spec:
      containers:
        - name: api
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          command: ["sh", "/app/start.sh"]
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-api-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-api-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-api-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-api-config
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-api-secret
                  key: DB_PASSWORD
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
          volumeMounts:
            - name: app-files
              mountPath: /app
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: app-files
          configMap:
            name: {{ .Release.Name }}-api-files
            defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-api
  labels:
    {{- include "dengue-app.labels" . | nindent 4 }}
    app: {{ .Release.Name }}-api
spec:
  type: {{ .Values.api.service.type }}
  ports:
    - port: {{ .Values.api.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}-api
{{- end }}